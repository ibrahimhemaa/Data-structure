#include<bits/stdc++.h>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
    right(right) {}
};
class Solution {
    public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==nullptr&&q==nullptr)return true;
        else if(p!=nullptr&&q!=nullptr){
            return(
                 p->val == q->val&&
                isSameTree(p->left, q->left) &&
                isSameTree(p->right, q->right)
                );
           
        }
        return false;
// write you code here
    }
};
int main(){
    TreeNode *root1,*root2;
    root1=new TreeNode(1);
    root1->left=new TreeNode(2);
    root1->right=new TreeNode(3);
    root2=new TreeNode(1);
    root2->left=new TreeNode(2);
    root2->right=new TreeNode(3);
    /*
    tree of root1
            1
           / \
          2   3
    tree of root2
            1
           / \
          2   3      
    */
    Solution s;
    cout<<"Test 1\n";
    if(s.isSameTree(root1,root2)){//example one return true
        cout<<"true"<<" : "<<"two tree isSameTree"<<endl;
    }
    else{
        cout<<"false"<<" : "<<"two tree dosn'tSameTree"<<endl;
    }
    delete(root1);//delete tree one
    delete(root2);//delete tree two
    root1=new TreeNode(1);
    root1->left=new TreeNode(2);
    root2=new TreeNode(1);
    root2->right=new TreeNode(2);
    /*
    tree of root1
            1
           / 
          2   
    tree of root2
            1
             \
              2      
    */
    cout<<"Test 2\n";
    if(s.isSameTree(root1,root2)){//example two return false 
        cout<<"true"<<" : "<<"two tree isSameTree"<<endl;
    }
    else{
        cout<<"false"<<" : "<<"two tree dosn'tSameTree"<<endl;
    }
    delete(root1);//delete tree one
    delete(root2);//delete tree two
    root1=new TreeNode(1);
    root1->left=new TreeNode(2);
    root1->right=new TreeNode(1);
    root2=new TreeNode(1);
    root2->left=new TreeNode(1);
    root2->right=new TreeNode(3);
    /*
    tree of root1
            1
           / \
          2   1
    tree of root2
            1
           / \
          1   3      
    */
    cout<<"Test 3\n";
    if(s.isSameTree(root1,root2)){//example three return false 
        cout<<"true"<<" : "<<"two tree isSameTree"<<endl;
    }
    else{
        cout<<"false"<<" : "<<"two tree dosn'tSameTree"<<endl;
    }
    delete(root1);//delete tree one
    delete(root2);//delete tree two
    root1=new TreeNode(1);
    root1->left=new TreeNode(2);
    root1->right=new TreeNode(3);
    root1->left->right=new TreeNode(4);
    root1->right->left=new TreeNode(5);
    root2=new TreeNode(1);
    root2->left=new TreeNode(2);
    root2->right=new TreeNode(3);
    root2->left->right=new TreeNode(4);
    root2->right->left=new TreeNode(5);
    /*
    tree of root1
                1
               / \
              /   \
             2    3
             \   /
              4  5
    tree of root2
                1
               / \
              /   \
             2    3
             \   /
              4  5          
    */
    cout<<"Test 4 \n";
    if(s.isSameTree(root1,root2)){//example four return true 
        cout<<"true"<<" : "<<"two tree isSameTree"<<endl;
    }
    else{
        cout<<"false"<<" : "<<"two tree dosn'tSameTree"<<endl;
    }
    delete(root1);//delete tree one
    delete(root2);//delete tree two
}
