#include<iostream>
using namespace std;
struct TreeNode{
    string val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(""),left(nullptr), right(nullptr) {}
    TreeNode(string x) : val(x) , left(nullptr), right(nullptr) {}
    TreeNode(string x, TreeNode *left, TreeNode *right) : val(x), left(left),
                                                       right(right) {}
};
class Tree{
    public:
        // Utility function to return the integer value
        // of a given string
        int toInt(string s)
        {
            int number = 0;
            if(s[0]!='-')
                for (int i=0; i<s.length(); i++)
                    number = number*10 + (int(s[i])-48);
            else
            {
              for (int i=1; i<s.length(); i++)
                number = number*10 + (int(s[i])-48);
              number= number*-1;
            }
            return number;
        }
        // This function receives a node of the syntax tree
        // and recursively evaluation it
        int evaluation(TreeNode* root)
        {
            if (!root)
                return 0;
            if (!root->left && !root->right)
                return toInt(root->val);
            // Evaluate left subtree    
            int Left = evaluation(root->left);
            // Evaluate right subtree
            int Right = evaluation(root->right);
            if (root->val=="+")
                return Left+Right;
            if (root->val=="-")
                return Left-Right;
            if (root->val=="*")
                return Left*Right;
            return Left/Right;
        }
};
int main(){
    TreeNode*root;
    root = new TreeNode("+");
    root->left = new TreeNode("3");
    root->right = new TreeNode("*");
    root->right->left = new TreeNode("4");
    root->right->right = new TreeNode("/");
    root->right->right->left = new TreeNode("8");
    root->right->right->right = new TreeNode("2");
    Tree T;
    /*
    TreeNode root
                   '+'
                   / \
                  3  '*'
                       \
                       '/'
                      /  \
                     8    2
    */
    cout<<"Test1 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
    root =new TreeNode("*");
    root->left=new TreeNode("+");
    root->left->left=new TreeNode("7");
    root->left->right=new TreeNode("3");
    root->right=new TreeNode("-");
    root->right->right=new TreeNode("5");
    root->right->left=new TreeNode("8");
    /*
    TreeNode root
                   '*'
                   /  \
                 '+'  '-'
                /  \  / \
               7   3 8   5
               //7+3(10)     8-5(3)
               //10*3(30)solution
    */
    cout<<"Test2 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
    root = new TreeNode("-");
    root->left = new TreeNode("*");
    root->right = new TreeNode("+");
    root->left->right=new TreeNode("2");
    root->left->left=new TreeNode("5");
    root->right->left = new TreeNode("4");
    root->right->right = new TreeNode("-");
    root->right->right->left = new TreeNode("3");
    root->right->right->right = new TreeNode("2");
    /*
    TreeNode root
                       '-'
                       / \
                      /   \
                    '*'   '+'
                    /\     /\
                   /  \   /  \
                  5   2  4   '-'
                             /\
                            /  \
                           3    2
                 
                 3-2(1)
                 5*2(10)  4+1(5)
                 10-5(5)solution
    */
    cout<<"Test3 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
    root = new TreeNode("/");
    root->left = new TreeNode("+");
    root->right = new TreeNode("*");
    root->left->right=new TreeNode("2");
    root->left->left=new TreeNode("10");
    root->right->left = new TreeNode("-");
    root->right->right = new TreeNode("2");
    root->right->left->left = new TreeNode("7");
    root->right->left->right = new TreeNode("4");
    /*
    TreeNode root
                       '/'
                       / \
                      /   \
                    '+'   '*'
                    /\     /\
                   /  \   /  \
                  10   2 '-'  2
                         /\
                        /  \
                       7    4 
                               
                7-4(3)
                10+2(12)     3*2(6)
                12/6(2)solution
    */
    cout<<"Test4 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
    root = new TreeNode("*");
    root->left = new TreeNode("/");
    root->right = new TreeNode("+");
    root->left->right=new TreeNode("-");
    root->left->left=new TreeNode("10");
    root->left->right->right=new TreeNode("5");
    root->left->right->left=new TreeNode("7");
    root->right->left = new TreeNode("3");
    root->right->right = new TreeNode("4");
    /*
    TreeNode root
                       '*'
                       / \
                      /   \
                    '/'   '+'
                    /\     /\
                   /  \   /  \
                  10  '-' 3  4
                      /\
                     /  \
                    7    5 
                               
                7-5(2)
                10/2(5)    4+3(7)
                5*7(35)solution
    */
    cout<<"Test5 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
    root = new TreeNode("+");
    root->left = new TreeNode("-");
    root->right = new TreeNode("/");
    root->left->right=new TreeNode("5");
    root->left->left=new TreeNode("+");
    root->left->left->left=new TreeNode("5");
    root->left->left->right=new TreeNode("1");
    root->right->left = new TreeNode("8");
    root->right->right = new TreeNode("4");
    /*
    TreeNode root
                       '+'
                       / \
                      /   \
                    '-'   '/'
                    /\     /\
                   /  \   /  \
                  '+'  5   8  4
                  /\
                 /  \
                5    1
                               
            5+1(6)
            6-5(1)       8/4(2)
            2+1(3)solution
    */
    cout<<"Test6 :"<<T.evaluation(root)<<endl;
    delete(root);
    //---------------------------------------------------
}
